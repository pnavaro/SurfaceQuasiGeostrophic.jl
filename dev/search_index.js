var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SurfaceQuasiGeostrophic","category":"page"},{"location":"#SurfaceQuasiGeostrophic","page":"Home","title":"SurfaceQuasiGeostrophic","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SurfaceQuasiGeostrophic.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The unknown of the model is the buoyancy b(txy) and the stream function psi(txy)  which are related through a Poisson like equation  i nabla  psi = b, which becomes in Fourier k hatpsi = hatb","category":"page"},{"location":"","page":"Home","title":"Home","text":"The dynamical model is the following","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracpartial bpartial t + (nabla times psi) cdot  nabla b = 0 ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solver uses Fourier techniques so that","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla times psi cdot nabla b = ifft(ik) times hatpsi cdot ifft(ik)hatb","category":"page"},{"location":"","page":"Home","title":"Home","text":"dans le main  paramètres divers   initialisation (fctbuoyancyinit.m)  appel au solver fctfftadvection_sto  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"dans fctfftadvection_sto  définition des maillages et modes initialisation du Poisson (avec sqrt !) paramètres (pour le terme hyper-visqueux, dt) boucle en temps : appel à Poisson puis RK4 ","category":"page"},{"location":"","page":"Home","title":"Home","text":"dans RK4fftadvection calcul des étapes de RK4 avec appel à derivefftadvection ","category":"page"},{"location":"","page":"Home","title":"Home","text":"dans derivefftadvection  calcul des termes d'advection ux ∂x b et uy ∂y b en pseudo-spectral (fft)  calcul du terme hyper-visqueux C (∂x^8 + ∂y^8) b en Fourier (–> C |k|^8 F(u)) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SurfaceQuasiGeostrophic]","category":"page"},{"location":"#SurfaceQuasiGeostrophic.Grid","page":"Home","title":"SurfaceQuasiGeostrophic.Grid","text":"init_grid_k(model)\n\nCreate a grid in the Fourier space\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceQuasiGeostrophic.Poisson","page":"Home","title":"SurfaceQuasiGeostrophic.Poisson","text":"TwoDPoissonPeriodic\n\nDerived type to solve the Poisson equation on 2d regular  cartesian mesh with periodic boundary conditions on both sides\n\nkx   : wave number in x\nky   : wave number in y\nk2   : k_x^2 + k_y^2\nnc_x : cells number in x\nnc_y : cells number in y\ndx   : x step size\ndy   : y step size\nrht  : fft(rho)\n\n\n\n\n\n","category":"type"},{"location":"#SurfaceQuasiGeostrophic.compute_dt-Tuple{Any, Any, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.compute_dt","text":"compute_dt( model, ogird, w)\n\nCFL of the (large-scale) advection\n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.compute_hyper_coef-Tuple{Any, Any, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.compute_hyper_coef","text":"compute_hyper_coef( model, grid, w )\n\ncompute hyperviscosity coefficient \n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.deriv_fft_advection-NTuple{4, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.deriv_fft_advection","text":"deriv_fft_advection(model, fft_b, w)\n\nCompute the Fourier transform of the partial derivative of the advection term (adv1) and hyperviscosity (adv2) term\n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.init_buoyancy-Tuple{Any, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.init_buoyancy","text":"init_buoyancy(model, resolution)\n\nInitial condition for the buoyancy\n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.rk4_fft_advection!-Tuple{Any, Any, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.rk4_fft_advection!","text":"rk4(model, fft_b, w)\n\nTime integration of the advection equation of b  by 4th order Runge-Kutta method with the speed w\n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.solve!-Tuple{Any, Any, Poisson, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.solve!","text":"solve!( ex, ey, poisson, rho )\n\nsolves Poisson equation to compute electric fields\n\nE(xy) = -nabla phi(xy) \n-Delta phi(xy) = rho(xy)\n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.solve!-Tuple{Any, Poisson, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.solve!","text":"solve!( poisson, phi, rho )\n\ncomputes phi from rho \n\n-Delta phi(xy) = rho(xy)\n\n\n\n\n\n","category":"method"},{"location":"#SurfaceQuasiGeostrophic.sqg_large_uq-Tuple{Any, Any, Any}","page":"Home","title":"SurfaceQuasiGeostrophic.sqg_large_uq","text":"sqg_large_uq(model, fft_b)\n\nCompute the streamfunction √Δ ψ = b and the velocity     ux = - ∂ψ / ∂y     uy = ∂ψ / ∂x\n\n\n\n\n\n","category":"method"}]
}
